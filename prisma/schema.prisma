// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String?   @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  role              Role      @default(USER)
  verificationToken String?   // For email verification
  resetToken        String?   // For password reset
  resetTokenExpiry  DateTime? // For password reset expiry
  accounts          Account[]
  sessions          Session[]
  blogs             Blog[]
  bookings          Booking[]
}

enum Role {
  USER
  ADMIN
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Destination {
  id          String    @id @default(cuid())
  name        String
  country     String
  description String    @db.Text
  price       Float
  rating      Float     @default(0)
  category    String
  featured    Boolean   @default(false)
  imageUrl    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  packages    Package[]
}

model Package {
  id            String     @id @default(cuid())
  title         String
  description   String     @db.Text
  price         Float
  duration      Int        // in days
  destinationId String
  destination   Destination @relation(fields: [destinationId], references: [id], onDelete: Cascade)
  inclusions    String[]
  exclusions    String[]
  itinerary     Itinerary[]
  imageUrl      String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  bookings      Booking[]
}

model Itinerary {
  id          String   @id @default(cuid())
  day         Int
  title       String
  description String   @db.Text
  packageId   String
  package     Package  @relation(fields: [packageId], references: [id], onDelete: Cascade)
}

model Blog {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     String   @db.Text
  excerpt     String   @db.Text
  imageUrl    String
  published   Boolean  @default(false)
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  category    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Booking {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  packageId   String
  package     Package  @relation(fields: [packageId], references: [id], onDelete: Cascade)
  startDate   DateTime
  endDate     DateTime
  totalPrice  Float
  status      BookingStatus @default(PENDING)
  adults      Int
  children    Int      @default(0)
  contactEmail String
  contactPhone String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  createdAt DateTime @default(now())
  responded Boolean  @default(false)
}

model Subscriber {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

